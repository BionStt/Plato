@using Microsoft.CodeAnalysis
@model SelectChannelsViewModel
@functions {

    string BuildChannels(SelectChannelsViewModel model)
    {
        var output = BuildChannelsRecursivly(model.SelectedChannels, model.HtmlName);
        return output;
    }

    string BuildChannelsRecursivly(
        IList<Selection<Channel>> channels,
        string htmlName,
        System.Text.StringBuilder sb = null,
        int id = 0)
    {

        if (sb == null)
        {
            sb = new System.Text.StringBuilder();
        }

        var style = id == 0 ? "display:block" : "display:none";
        sb.Append("<ul style=\"")
            .Append(style)
            .Append("\" class=\"list-group list-group-flush\">");

        foreach (var channel in Model.SelectedChannels)
        {
            var nodeId = htmlName + "-node-" + channel.Value.Id;
            var checkId = htmlName + "-check-" + channel.Value.Id;
            var css = @channel.IsSelected ? "list-group-item active" : "list-group-item";
            var check = channel.IsSelected ? " checked" : string.Empty;

            if (channel.Value.ParentId == id)
            {
                sb.Append("<li id=\"")
                    .Append(nodeId)
                    .Append("\" class=\"")
                    .Append(css)
                    .Append("\" data-filter-value=\"")
                    .Append(channel.Value.Name)
                    .Append("\">");

                sb.Append("<div class=\"p-2\"");
                if (channel.Value.Depth > 0)
                {
                    sb.Append(" style=\"margin-left: ")
                        .Append(channel.Value.Depth)
                        .Append("rem;\"");
                }
                sb.Append("\">");

                if (channel.Value.Children.Count > 0)
                {
                    sb.Append("<a class=\"btn toggler\" data-node-id=\"")
                        .Append(nodeId)
                        .Append("\" data-toggle=\"tree\" href=\"#\">");
                    sb.Append("<i class=\"fal fa-chevron-right\"></i>");
                    sb.Append("</a>");
                }
                else
                {
                    sb.Append("<span class=\"btn toggler\">")
                        .Append("<i class=\"fal\"></i>")
                        .Append("</span>");
                }

                sb.Append("<input type=\"radio\" id=\"")
                    .Append(checkId)
                    .Append("\" name=\"")
                    .Append(htmlName)
                    .Append("\" value=\"")
                    .Append(channel.Value.Id)
                    .Append("\" data-node-id=\"")
                    .Append(nodeId)
                    .Append("\"")
                    .Append(check)
                    .Append("/>");

                sb.Append("<label for=\"")
                    .Append(checkId)
                    .Append("\">");

                sb.Append("<i class=\"fal mr-2 check-icon\"></i>");

                var foreColor = channel.Value.ForeColor;
                if (String.IsNullOrEmpty(foreColor))
                {
                    foreColor = "#fff";
                }

                var bgColor = channel.Value.BackColor;
                if (String.IsNullOrEmpty(bgColor))
                {
                    bgColor = "rgba(125, 125, 125, .5)";
                }

                sb.Append("<span class=\"channel-icon channel-icon-sm mr-2\" style=\"background-color: ")
                    .Append(bgColor)
                    .Append("; color: ")
                    .Append(foreColor)
                    .Append(";\">")
                    .Append("<i class=\"")
                    .Append(channel.Value.IconCss)
                    .Append("\"></i>")
                    .Append("</span>");

                sb.Append(channel.Value.Name);

                sb.Append("</label>");

                sb.Append("</div>");

                // Recuse
                BuildChannelsRecursivly(channels, htmlName, sb, channel.Value.Id);


                sb.Append("</li>");

            }


        }

        sb.Append("</ul>");

        return sb.ToString();


    }

}

<div class="dropdown" data-provide="select-dropdown">
    <a class="list-group-item list-group-item-action dropdown-toggle dropdown-toggle-no-caret font-weight-bold" href="#" id="channelDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <i class="fal fa-cog float-right"></i>
        @T["Channel"]
    </a>
    <div class="dropdown-menu dropdown-menu-right" style="width: 475px;" aria-labelledby="channelDropdown">
        <div class="dropdown-header">
            <a href="#" class="text-muted float-right" data-toggle="dropdown">
                <i class="fal fa-times"></i>
            </a>
            @T["Select channels..."]
        </div>
        <div class="my-2 mx-3">
            <input type="search" class="form-control" placeholder="@T["Search..."]" />
        </div>
        <div class="dropdown-header hidden empty">
            @T["No channel found"]
        </div>

        @if (Model.SelectedChannels != null)
        {
            <div class="tree select-dropdown" data-provide="tree">
                @Html.Raw(BuildChannels(Model))
            </div>
        }
        else
        {
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    @T["No channels available."]
                </li>
            </ul>
        }

    </div>
</div>

@{
    // get selected channels for preview
    var selectedChannels = Model.SelectedChannels?.Where(c => c.IsSelected == true).ToList() ?? new List<Selection<Channel>>();
}
@if (selectedChannels.Count > 0)
{
    <ul data-empty-preview-text="@T["No channels selected."]" class="list-group select-dropdown-preview">
        @foreach (var channel in selectedChannels)
        {
            <li class="list-group-item">
                @if (!String.IsNullOrWhiteSpace(channel.Value.IconCss))
                {
                    <span class="channel-icon channel-icon-sm mr-2" style="background-color: @channel.Value.BackColor; color: @channel.Value.ForeColor">
                        <i class="@channel.Value.IconCss"></i>
                    </span>
                }
                @channel.Value.Name
            </li>
        }
    </ul>
}
else
{
    <ul data-empty-preview-text="@T["No channels selected."]" class="list-group select-dropdown-preview">
        <li class="list-group-item">
            @T["No channels selected."]
        </li>
    </ul>
}


