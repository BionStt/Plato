@model SelectLabelsViewModel

<div class="dropdown" data-provide="select-dropdown">

    <a class="list-group-item list-group-item-light list-group-item-action dropdown-toggle dropdown-toggle-no-caret" href="#" id="channelDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <i class="fal fa-chevron-down p-1 float-right"></i>
        @T["Label"]
    </a>
    <div class="dropdown-arrow dropdown-arrow-right"></div>
    <div class="dropdown-menu dropdown-menu-right" style="width: 400px;" aria-labelledby="channelDropdown">
        <div class="dropdown-header">
            <a href="#" class="text-muted float-right" data-toggle="dropdown">
                <i class="fal fa-times"></i>
            </a>
            @T["Select labels..."]
        </div>
        <div class="my-2 mx-3">
            <input type="search" class="form-control" placeholder="@T["Search..."]" />
        </div>
        <div class="dropdown-header hidden empty">
            @T["No labels found"]
        </div>

        @if (Model.SelectedLabels != null)
        {
            <div class="list-group-flush select-dropdown">
                @foreach (var label in Model.SelectedLabels)
                {
                    var check = label.IsSelected ? "checked" : "";
                    var uniqueId = "label-" + label.Value.Id;
                    var css = label.IsSelected ? "list-group-item dropdown-item active" : "list-group-item dropdown-item";
                    <input name="@Model.HtmlName" type="checkbox" value="@label.Value.Id" id="@uniqueId" @check/>
                    <label data-value="@label.Value.Name" class="@css" for="@uniqueId">
                        <i class="fal mr-2 check-icon"></i>
                        @if (!String.IsNullOrWhiteSpace(label.Value.IconCss))
                        {
                        <span class="channel-icon channel-icon-sm mr-2" style="background-color: @label.Value.BackColor; color: @label.Value.ForeColor">
                            <i class="@label.Value.IconCss"></i>
                        </span>
                        }
                        @label.Value.Name
                    </label>
                }
            </div>
        }
        else
        {
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    @T["No channels available."]
                </li>
            </ul>
        }

    </div>
</div>

@{
    // get selected labels for preview
    var selectedLabels = Model.SelectedLabels?.Where(c => c.IsSelected == true).ToList() ?? new List<Selection<Label>>();
}
@if (selectedLabels.Count > 0)
{
    <ul data-empty-preview-text="@T["No channels selected."]" class="list-group select-dropdown-preview">
        @foreach (var channel in selectedLabels)
        {
            <li class="list-group-item">
                @if (!String.IsNullOrWhiteSpace(channel.Value.IconCss))
                {
                    <span class="channel-icon channel-icon-sm mr-2" style="background-color: @channel.Value.BackColor; color: @channel.Value.ForeColor">
                        <i class="@channel.Value.IconCss"></i>
                    </span>
                }
                @channel.Value.Name
            </li>
        }
    </ul>
}
else
{
    <ul data-empty-preview-text="@T["No channels selected."]" class="list-group select-dropdown-preview">
        <li class="list-group-item">
            @T["No channels selected."]
        </li>
    </ul>
}


