@using Microsoft.AspNetCore.Mvc.Routing
@using Microsoft.AspNetCore.Routing
@using Plato.Internal.Data.Abstractions
@model TopicIndexViewModel

<card class="card card-body-flush">
    <card-title>
        <h6 class="card-title float-left">@T["Topics"]</h6>
        <ul class="nav navbar p-0 float-right">
            <li class="nav-item dropdown">
                <a class="nav-link text-muted dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @T["Filter"]
                </a>
                <div class="dropdown-arrow"></div>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown">
                    <a class="dropdown-item" href="#">Action</a>
                    <a class="dropdown-item" href="#">Another action</a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="#">Something else here</a>
                </div>
            </li>
            <li class="nav-item dropdown">
                <a class="nav-link text-muted dropdown-toggle" href="#" id="sortByDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @T["Sort By"]
                </a>
                <div class="dropdown-arrow"></div>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="sortByDropdown">
                    @foreach (var option in Model.SortColumns)
                    {
                        var routeValues = new RouteValueDictionary()
                        {
                            ["opts.sort"] = option.Value
                        };
                        if (Model.Options.Order != OrderBy.Desc)
                        {
                            routeValues.Add("opts.order", Model.Options.Order);
                        }
                        var iconCss = option.Value == Model.Options.Sort ? "fal fa-fw fa-check" : "fal fa-fw";
                        <a class="dropdown-item px-2" href="@GetRouteUrl(routeValues)">
                            <i class="@iconCss"></i>
                            @T[option.Text]
                        </a>
                    }
                    <div class="dropdown-divider"></div>
                    @foreach (var option in Model.SortOrder)
                    {
                        var routeValues = new RouteValueDictionary()
                        {
                            ["opts.sort"] = Model.Options.Sort,
                            ["opts.order"] = option.Value
                        };
                        var iconCss = option.Value == Model.Options.Order ? "fal fa-fw fa-check" : "fal fa-fw";
                        <a class="dropdown-item px-2" href="@GetRouteUrl(routeValues)">
                            <i class="@iconCss"></i>
                            @T[option.Text]
                        </a>
                    }
                </div>
            </li>
        </ul>
    </card-title>
    <card-body>
        @if (Model.Results != null)
        {
            <ul class="list-group list-group-flush list-group-hover">
                @foreach (var topic in Model.Results.Data)
                {
                    <li class="list-group-item  list-group-item-action pt-4">
                        @await DisplayAsync(new View("TopicListItem", new
                        {
                            model = new TopicListItemViewModel()
                            {
                                Topic = topic
                            } 
                        }))
                    </li>

                }
            </ul>
        }
        else
        {
            <ul class="list-group list-group-flush list-group-hover">
                <li class="list-group-item">
                    <h6>@T["No topics found"]</h6>
                </li>
            </ul>
        }
    </card-body>
</card>

<div class="mt-4 mb-4">
    <pager model="@Model.Pager"></pager>
</div>
