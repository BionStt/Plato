@using Plato.Internal.Models.Extensions
@model EntitiesOverviewReportViewModel
@{
    var entitiesLabels = Model.Entities?.SerializeLabels() ?? "[]";
    var entitiesData = Model.Entities?.SerializeCounts() ?? "[]";
    var repliesLabels = Model.Replies?.SerializeLabels() ?? "[]";
    var repliesData = Model.Replies?.SerializeCounts() ?? "[]";
    var viewsLabels = Model.Views?.SerializeLabels() ?? "[]";
    var viewsData = Model.Views?.SerializeCounts() ?? "[]";
    var entities = Model.Entities?.Total() == 1
        ? "New Entity"
        : "New Entities";
    var replies = Model.Replies?.Total() == 1
        ? "New Reply"
        : "New Replies";
    var views = Model.Views?.Total() == 1
        ? "view"
        : "views";
}

<div class="row">
    <div class="col-lg-4 col-md-12 col-sm-12 mb-3">

        <card>
            <card-body>
                <i class="fal fa-eye float-right"></i>
                @if (Model.Views != null)
                {
                    <h5 class="d-inline">@Model.Views.Total().ToPrettyInt()</h5>
                }
                else
                {
                    <h5>0</h5>
                }
                <br />
                @T["Entity Views"]
                <div class="position-relative mt-3" style="height: 100px;">
                    <canvas id="entityViewsChart" class="w-100"></canvas>
                </div>
            </card-body>
        </card>
          
    </div>
    <div class="col-lg-4 col-md-12 col-sm-12 mb-3">
        
        <card>
            <card-body>
                <div>
                    <i class="fal fa-plus float-right"></i>

      
                    @if (Model.Entities != null)
                    {
                        <h5  class="d-inline">
                            @Model.Entities.Total().ToPrettyInt()
                        </h5>
                    }
                    else
                    {
                        <h5  class="d-inline">0</h5>
                    }
                    <br/>
                    @T[entities]
                </div>
                <div class="position-relative mt-3" style="height: 100px;">
                    <canvas id="newEntitiesChart" class="w-100"></canvas>
                </div>
            </card-body>
        </card>
      
           
        

    </div>
    <div class="col-lg-4 col-md-12 col-sm-12 mb-3">
        
        <card>
            <card-body>
                
                    <i class="fal fa-reply float-right"></i>
                
                    @if (Model.Replies != null)
                    {
                        <h5  class="d-inline">
                            @Model.Replies.Total().ToPrettyInt()
                        </h5>
                    }
                    else
                    {
                        <h5  class="d-inline">0</h5>
                    }
                    <br/>
                    @T[replies]
          
                <div class="position-relative mt-3" style="height: 100px;">
                    <canvas id="newRepliesChart" class="w-100"></canvas>
                </div>

            </card-body>
        </card>
    


    </div>
</div>

<script section="Footer">

    $(function(win, doc, $) {

        "use strict";

        var app = win.$.Plato,
            scales = {
                xAxes: [
                    {
                        display: false,
                        stacked: false,
                        gridLines: {
                            drawBorder: false,
                            drawOnChartArea: true,
                            drawTicks: false,
                            color: win.Chart.helpers.color(app.ui.chartColors.gray).alpha(0.5).rgbString()
                        },
                        ticks: {
                            stepSize: 1,
                            callback: function(dataLabel, index) {
                                return index % 3 === 0 ? dataLabel : '';
                            }
                        }
                    }
                ],
                yAxes: [
                    {
                        display: false
                    }
                ]
            },
            charts = [
                {
                    id: "entityViewsChart",
                    data: {
                        labels: @Html.Raw(entitiesLabels),
                        datasets: [
                            {
                                label: 'View',
                                fill: true,
                                backgroundColor: Chart.helpers.color(app.ui.chartColors.blue).alpha(0.5).rgbString(),
                                borderColor: app.ui.chartColors.blue,
                                borderWidth: 2,
                                backgroundColor: Chart.helpers.color(app.ui.chartColors.blue).alpha(0.5).rgbString(),
                                lineWidth: 2,
                                pointRadius: 0,
                                pointHoverRadius: 0,
                                data: @Html.Raw(viewsData)
                            }
                        ]
                    }
                },
                 {
                    id: "newEntitiesChart",
                    data: {
                        labels: @Html.Raw(entitiesLabels),
                        datasets: [
                            {
                                label: 'New',
                                fill: true,
                                backgroundColor: Chart.helpers.color(app.ui.chartColors.blue).alpha(0.5).rgbString(),
                                borderColor: app.ui.chartColors.blue,
                                borderWidth: 2,
                                backgroundColor: Chart.helpers.color(app.ui.chartColors.blue).alpha(0.5).rgbString(),
                                lineWidth: 2,
                                pointRadius: 0,
                                pointHoverRadius: 0,
                                data: @Html.Raw(entitiesData)
                            }
                        ]
                    }
                },
                {
                    id: "newRepliesChart",
                    data: {
                        labels: @Html.Raw(entitiesLabels),
                        datasets: [
                            {
                                label: 'Replies',
                                fill: true,
                                backgroundColor: Chart.helpers.color(app.ui.chartColors.blue).alpha(0.5).rgbString(),
                                borderColor: app.ui.chartColors.blue,
                                borderWidth: 2,
                                backgroundColor: Chart.helpers.color(app.ui.chartColors.blue).alpha(0.5).rgbString(),
                                lineWidth: 2,
                                pointRadius: 0,
                                pointHoverRadius: 0,
                                data: @Html.Raw(repliesData)
                            }
                        ]
                    }
                }
            ];

        app.ready(function() {

            var chart = null;
            for (var i = 0; i < charts.length; i++) {

                chart = new win.Chart(doc.getElementById(charts[i].id).getContext('2d'),
                    {
                        type: 'line',
                        data: charts[i].data,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            legend:
                            {
                                display: false,
                                position: 'bottom'
                            },
                            title:
                            {
                                display: false
                            },
                            tooltips: {
                                position: 'nearest',
                                mode: 'index',
                                intersect: false
                            },
                            animation: false,
                            scales: scales
                        }
                    });
            }
            
        });

    }(window, document, jQuery));

</script>