@model EntityTreeViewModel
@functions {

    async Task<string> BuildCategories(EntityTreeViewModel model)
    {
        return await BuildRecursively(model.SelectedEntities, model.HtmlName);
    }

    bool IsParentOfSelected(int id, IEnumerable<IEntity> selectedParents)
    {
        return selectedParents?.FirstOrDefault(p => p.Id == id) != null ? true : false;
    }

    async Task<string> BuildRecursively(
        IList<Selection<IEntity>> entities,
        string htmlName,
        System.Text.StringBuilder sb = null,
        int id = 0)
    {

        if (sb == null)
        {
            sb = new System.Text.StringBuilder();
        }

        var isParentOrRoot = id == 0 || IsParentOfSelected(id, Model.SelectedParents);

        var style = isParentOrRoot ? "display:block" : "display:none";
        sb.Append("<ul style=\"")
            .Append(style)
            .Append("\" class=\"list-group list-group-flush\">");

        if (Model.SelectedEntities != null)
        {

            foreach (var entity in Model.SelectedEntities)
            {
                var nodeId = htmlName + "-node-" + entity.Value.Id;
                var checkId = htmlName + "-check-" + entity.Value.Id;
                var css = entity.IsSelected ? "list-group-item list-group-item-action active checked" : "list-group-item list-group-item-action";

                var isParentOfSelected = IsParentOfSelected(entity.Value.Id, Model.SelectedParents);
                if (isParentOfSelected)
                {
                    css += " show";
                }

                var check = entity.IsSelected ? " checked" : string.Empty;

                if (entity.Value.ParentId == id)
                {

                    var url = "";
                    if (Model.RouteValues != null)
                    {
                        Model.RouteValues["opts.id"] = entity.Value.Id;
                        Model.RouteValues["opts.alias"] = entity.Value.Alias;
                        url = base.GetRouteUrl(Model.RouteValues);
                    }
                
                    var listItemStyle =
                    sb.Append("<li id=\"")
                        .Append(nodeId)
                        .Append("\" class=\"")
                        .Append(css)
                        .Append("\" data-filter-list-value=\"")
                        .Append(entity.Value.Title)
                        .Append("\">");

                    sb.Append("<div class=\"tree-row\"");
                    if (entity.Value.Depth > 0)
                    {
                        sb.Append(" style=\"margin-left: ")
                            .Append(entity.Value.Depth)
                            .Append("rem;\"");
                    }
                    sb.Append("\">");

                    if (entity.Value.Children.Any())
                    {
                        sb.Append("<div class=\"tree-left\">");
                        sb.Append("<a class=\"btn toggler mr-2\" data-node-id=\"")
                            .Append(nodeId)
                            .Append("\" data-toggle=\"tree\" href=\"#\">");
                        sb.Append("<i class=\"fal fa-chevron-right\"></i>");
                        sb.Append("</a>");
                        sb.Append("</div>");
                    }
                    else
                    {
                        //sb.Append("<div class=\"tree-left\"></div>");
                    }

                    sb.Append("<div class=\"tree-body\">");

                    if (@Model.EnableCheckBoxes)
                    {
                        sb.Append("<input type=\"radio\" id=\"")
                            .Append(checkId)
                            .Append("\" name=\"")
                            .Append(htmlName)
                            .Append("\" value=\"")
                            .Append(entity.Value.Id)
                            .Append("\" data-node-id=\"")
                            .Append(nodeId)
                            .Append("\"")
                            .Append(check)
                            .Append("/>");
                    }

                    sb.Append("<label for=\"")
                        .Append(checkId)
                        .Append("\">");

                    if (@Model.EnableCheckBoxes)
                    {
                        sb.Append("<i class=\"fal mr-2 check-icon\"></i>");
                    }

                    if (!string.IsNullOrEmpty(url))
                    {
                        sb.Append("<a href=\"")
                            .Append(url)
                            .Append("\">");
                    }
                    sb.Append(entity.Value.Title);
                    if (!string.IsNullOrEmpty(url))
                    {
                        sb.Append("</a>");
                    }

                    sb.Append("</label>");

                    sb.Append("</div>");

                    if (!String.IsNullOrEmpty(Model.EditMenuViewName))
                    {
                        var view = await DisplayAsync(new View(Model.EditMenuViewName, new
                        {
                            entityId = entity.Value.Id
                        }));
                        sb.Append(view.ToHtmlString());
                    }
                 

                    sb.Append("</div>");

                    // Recurse
                    await BuildRecursively(entities, htmlName, sb, entity.Value.Id);

                    sb.Append("</li>");

                }

            }
        }
        else
        {
            sb.Append("<li class=\"py-2 px-3\">");
            sb.Append(T["No results found"].Value);
            sb.Append("</li>");
        }
        sb.Append("</ul>");

        return sb.ToString();

    }

}

@{
    var css = string.IsNullOrEmpty(Model.CssClass)
        ? "tree"
        : "tree " + Model.CssClass;
}
<div class="@css" data-provide="tree">
    @Html.Raw(await BuildCategories(Model))
</div>
