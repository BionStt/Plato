@model AggregatedResult<string>
@{
    var labels = Model?.SerializeLabels() ?? "[]";
    var data = Model?.SerializeCounts() ?? "[]";
    var chartId = "pageViewsByFeatureChart";
}



@*@foreach (var aggregate in Model.Data)
{
    var width = aggregate.Count.ToPercentageOf(@Model.Total()) + "%";
    <card>
        <card-body>

            <div class="d-block">
                <h5 class="float-right">
                    @aggregate.Count.ToPrettyInt()
                </h5>
                <strong>
                    @aggregate.Aggregate
                </strong>
                <br/>
                <span class="text-muted">
                    @T["Page Views"]
                </span>


            </div>
            <div class="d-block mt-3">
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @width" aria-valuenow="@aggregate.Count" aria-valuemin="0" aria-valuemax="@Model.Total()"></div>
                </div>
            </div>
        </card-body>
    </card>
}*@

<card>
    <card-body>

        <i class="fal fa-eye float-right"></i>
        @if (Model != null)
        {
            <h5 class="d-inline">@Model.Total().ToPrettyInt()</h5>
        }
        else
        {
            <h5>0</h5>
        }
        <br />
        @T["Views By Feature"]
        <div class="position-relative w-100 mt-3" style="height: 150px;">
            <canvas id="@chartId"></canvas>
        </div>

    </card-body>
</card>


<script section="Footer">

    if (typeof window.$.Plato.Reports === "undefined") {
        throw new Error("$.Plato.Reports Required");
    }

    if (typeof window.$.Plato.Charts === "undefined") {
        throw new Error("$.Plato.Charts Required");
    }

    $(function (win, doc, $) {

        "use strict";

        var app = win.$.Plato,
            charts = win.$.Plato.Charts;

        app.ready(function() {


            var data = @Html.Raw(data),
                randomColors = charts.randomColors(data.length);

            charts.initDoughnut("@chartId",  {
                labels: @Html.Raw(labels),
                datasets: [
                    {
                        fill: true,
                        borderWidth: 0,
                        lineWidth: 0,
                        pointRadius: 0,
                        pointHoverRadius: 0,
                        backgroundColor: randomColors.backgroundColors,
                        borderColor: randomColors.borderColors,
                        hoverBackgroundColor: randomColors.hoverBackgroundColors,
                        data: data
                    }
                ]
            });


        });


    }(window, document, jQuery));

</script>