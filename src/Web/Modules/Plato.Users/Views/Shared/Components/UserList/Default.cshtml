@using Microsoft.AspNetCore.Routing
@using PlatoCore.Data.Abstractions
@model UserIndexViewModel

<card class="card card-body-flush">
    <card-title>
        <h6 class="card-title d-inline-block">@T["Users"]</h6>
        <ul class="nav navbar p-0 float-right">
            <li class="nav-item dropdown">
                <a class="nav-link text-muted dropdown-toggle" href="#" id="filterDropDown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @T["Filter"]
                </a>
                <div class="dropdown-menu dropdown-menu-right anim anim-2x anim-scale-in" aria-labelledby="filterDropDown">
                    <div class="min-w-200 max-h-250 overflow-auto">
                        @foreach (var option in Model.Filters)
                        {
                            var routeValues = new RouteValueDictionary(ViewContext.RouteData.Values)
                            {
                                ["opts.sort"] = Model.Options.Sort,
                                ["opts.order"] = Model.Options.Order,
                                ["opts.filter"] = option.Value
                            };
                            @if (option.Permission != null)
                            {
                                <authorize asp-permission="@option.Permission.Name">
                                    <authorize-success>
                                        @if (option.Text == "-")
                                        {
                                            <div class="dropdown-divider"></div>
                                        }
                                        else
                                        {
                                            var iconCss = option.Value == Model.Options.Filter ? "fal fa-fw fa-check" : "fal fa-fw";
                                            <a class="dropdown-item px-2" href="@GetRouteUrl(routeValues)">
                                                <i class="@iconCss"></i>
                                                @T[option.Text]
                                            </a>
                                        }
                                    </authorize-success>
                                </authorize>
                            }
                            else
                            {
                                @if (option.Text == "-")
                                {
                                    <div class="dropdown-divider"></div>
                                }
                                else
                                {
                                    var iconCss = option.Value == Model.Options.Filter ? "fal fa-fw fa-check" : "fal fa-fw";
                                    <a class="dropdown-item px-2" href="@GetRouteUrl(routeValues)">
                                        <i class="@iconCss"></i>
                                        @T[option.Text]
                                    </a>
                                }
                            }
                        }
                    </div>
                </div>
            </li>
            <li class="nav-item dropdown">
                <a class="nav-link text-muted dropdown-toggle" href="#" id="sortByDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @T["Sort"]
                </a>
                <div class="dropdown-menu dropdown-menu-right anim anim-2x anim-scale-in" aria-labelledby="sortByDropdown">
                    <div class="min-w-200 max-h-250 overflow-auto">
                    @foreach (var option in Model.SortColumns)
                    {
                        var routeValues = new RouteValueDictionary(ViewContext.RouteData.Values)
                        {
                            ["opts.sort"] = option.Value
                        };
                        if (Model.Options.Order != OrderBy.Desc)
                        {
                            if (!routeValues.ContainsKey("opts.order"))
                            {
                                routeValues.Add("opts.order", Model.Options.Order);
                            }

                        }
                        var iconCss = option.Value == Model.Options.Sort ? "fal fa-fw fa-check" : "fal fa-fw";
                        <a class="dropdown-item px-2" href="@GetRouteUrl(routeValues)">
                            <i class="@iconCss"></i>
                            @T[option.Text]
                        </a>
                    }
                    <div class="dropdown-divider"></div>
                    @foreach (var option in Model.SortOrder)
                    {
                        var routeValues = new RouteValueDictionary(ViewContext.RouteData.Values)
                        {
                            ["opts.sort"] = Model.Options.Sort,
                            ["opts.order"] = option.Value
                        };
                        var iconCss = option.Value == Model.Options.Order ? "fal fa-fw fa-check" : "fal fa-fw";
                        <a class="dropdown-item px-2" href="@GetRouteUrl(routeValues)">
                            <i class="@iconCss"></i>
                            @T[option.Text]
                        </a>
                    }
                    </div>    
                </div>
            </li>
        </ul>
    </card-title>
    <card-body>
        @if (Model.Results?.Data != null)
        {
            var offset = Model.Pager.Offset;
            var rowOffset = Model.Pager.RowOffset;
            <div data-provide="infiniteScroll"
                 data-infinite-scroll-url="@Model.Pager.Url"
                 data-infinite-scroll-offset="@offset"
                 data-infinite-scroll-row-offset="@rowOffset"
                 data-infinite-scroll-page="@Model.Pager.Page"
                 data-infinite-scroll-total-pages="@Model.Pager.TotalPages"
                 class="list-group list-group-flush list-group-hover infinite-scroll">
                <div class="row no-gutters">
                    <div class="list-group-item infinite-scroll-loader col-12" data-type="previous"></div>
                    @foreach (var user in Model.Results.Data)
                    {
                        var css = rowOffset == offset
                            ? "infinite-scroll-item infinite-scroll-item-active"
                            : "infinite-scroll-item";
                        <div class="float-left list-group-item list-group-item-action col-lg-4 col-md-6 col-sm-12 p-0">
                            <div class="@css" data-infinite-scroll-offset="@rowOffset" data-infinite-scroll-highlight="@rowOffset">
                                @await DisplayAsync(new View("UserListItem", new
                                {
                                    model = new UserListItemViewModel()
                                    {
                                        User = user,
                                        EnableEdit = Model.Options.EnableEdit
                                    }
                                }))
                            </div>
                        </div>
                        {
                            rowOffset++;
                        }
                    }
                    <div class="list-group-item infinite-scroll-loader col-12" data-type="next"></div>
                </div>

            </div>
        }
        else
        {
            <ul class="list-group list-group-flush list-group-hover">
                <li class="list-group-item">
                    @T["No users found"]
                </li>
            </ul>
        }
    </card-body>
</card>

@if (Model.Pager.Enabled)
{
    <div class="mt-4 mb-4">
        <pager model="@Model.Pager"></pager>
    </div>
}
